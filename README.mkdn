Unoffical Shamu AOSiP 8.1 (Draft README)
===========

Getting Started building Android on Windows 10 with WSL
---------------

To get started with building Android, please review common building comands
[Git and Repo](http://source.android.com/source/using-repo.html).
---------------


Requirements:

* Windows 10 (64-bit) installed on a drive (256GB or bigger) (SSD recommended)
* 16GB RAM or more
* Modern CPU (i5, i7)
* Modern GPU (GTX 670+)
---------------


Setup up your Build Environment:


1. Install and Enable: [Windows Subsystem Linux (WSL)](https://docs.microsoft.com/en-us/windows/wsl/install-win10) and choose a distro app (Ubuntu recommended)

2. Once Ubuntu is installed, within the same Ubuntu Terminal, enter the following commands:

```bash
sudo apt update -y
```

```bash
sudo apt install git android-sdk-platform-tools bc build-essential ccache curl g++-multilib gcc-multilib git gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev liblz4-tool libncurses5-dev libsdl1.2-dev libssl-dev libwxgtk3.0-dev libxml2 libxml2-utils lzop pngcrush repo rsync schedtool squashfs-tools xsltproc zip zlib1g-de openjdk-8-jdk
```

3. Next, go to [51-android.rules](https://raw.githubusercontent.com/M0Rf30/android-udev-rules/master/51-android.rules) and copy this entire page and save it as 51-android.rules to your desktop.

In the terminal: Change the directory to the required folder with this command:

```bash
cd ~/etc/udev/rules.d
```

Then:

```bash
cp /mnt/c/Users/USERNAME/Desktop/51-android.rules ~/etc/udev/51-android.rules
```
---------------


4. Setup and Initialize your local repository of this ROM. 

Use the following command:

Note: Makes the directory: (Noted this must be done through command line, if created through explorer it will fail)

```bash
mkdir -p ~/android/AOSiP
```

Then: Change the directory to the ROM folder:

```bash
cd ~/android/AOSiP
```

Then: Point to where the source is located on Github:

```bash
repo init -u git://github.com/wavedashdoc/platform_manifest.git -b oreo-mr1-WVDD-stable
```

Then: To start syncing the source:

```bash
repo sync -f --force-sync --no-tags --no-clone-bundle
```

Then....

4. Wait, this will take a LONG TIME depending on your internet connection. (You'll be downloading around 30+GB)

Example: 100up/100down about 1hour 30min
---------------


5. While waiting for the source to finish syncing, add the following to the very bottom of your .bashrc file located:

```bash
C:\Users\"USERNAME"\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState\rootfs\home\"LINUXUSER"\.bashrc
```

Note: for "USERNAME" = username for your computer

For "LINUXUSER" = the name you chose for your Linux Distro

```bash
# ccache
export USE_CCACHE=1
export CCACHE_DIR=~/.ccache
ccache -M 100G;

export BISON_EXEC=~/android/AOSiP/out/host/linux-x86/bin/bison
export IJAR_EXEC=~/android/AOSiP/out/host/linux-x86/bin/ijar

# Android tools
export PATH=${PATH}:~/Android/Sdk/tools
export PATH=${PATH}:~/Android/Sdk/platform-tools
export PATH=${PATH}:~/bin
export ANDROID_HOME=~/Android/Sdk
export LC_ALL=C
```

Prebuilding Bison and Ijar

Note: We need to build Bison and Ijar because WSL runs 64-bit binaries, not 32-bit. Building them from source first before the ROM will avoid the fatal build error "cannot execute binary file: Exec format error":
---------------


Building the ROM

6. In the same Ubuntu terminal window:

```bash
make bison
```

Then:

```bash
make ijar
```

Then: 

```bash
. build/envsetup.sh
```

```bash
lunch 
```

```bash
aosip_shamu-userdebug
```

```bash
time mka kronic
```

7. Profit Hopefully?!! Finished build will be located in android/AOSiP/out/target/product/shamu

Success!? So... what's next?

You've done it! Welcome to the elite club of self-builders. You've built your operating system from scratch, from the ground up. You are the master/mistress of your domain... and
hopefully you've learned a bit on the way and had some fun too.
---------------


ROM building is based off of [LineageOS Building with WSL](https://github.com/LineageOS/lineage_wiki/commit/97094f0ab3cc8a00154eb0878344320efc26e480).

And also [XDA [GUIDE] How to build LineageOS 16.0 on Windows 10 (via WSL)](https://forum.xda-developers.com/android/software-hacking/guide-how-to-build-lineageos-15-1-t3750175).

And thanks to Camcory for his help this past year. 
